# The Math library.
# Contains different math functions and constants

include std # Requires the std library

include assert

PI = 3.141592653589793
NICE = 69
E = 2.718281828459045
LN_2 = 0.6931471805599453

def abs (x) {
    # Returns the absolute value of x
    ret (x^2)^0.5
}

def sqrt (x) {
    # Returns the square root of x
    ret x ^ 0.5
}

def nroot (x, n) {
    # Returns the n-th root of x
    ret x ^ (1/n)
}

def sign (x) {
    # Returns the sign of x;
    #   x < 0 -> -1
    #   x = 0 ->  0
    #   x > 0 ->  1
    
    ret if(negative(x),
        -1,
        elif(null(x),
            0,
            1))
}

@%
def mod (a, b) {
    # Returns the remainder of a // b

    def NNMod (a, b) {
        ret a - ((a // b) * b)
    }
    
    ret if(negative(a),
        {
            a = abs(a)
            ret b - NNMod(a, b)
        },
        NNMod(a, b)
    )
}

def floor (x) {
    # Returns the floor of x
    ret x - (x @% 1)
}

def int (x) {
    # Returns the integer part of x
    ret sign(x) * floor(abs(x))
}

def ceil (x) {
    # Returns the ceiling of x
    ret if(
        int(x) @== x,
        x,
        floor(x) + 1)
}

def decimal (x) {
    # Returns the decimal part of x
    ret x - int(x)
}

def round (x) {
    # Returns the rounded value of x
    sign = sign(x)
    x = abs(x)
    ret sign * if(
                decimal(x) @< 0.5,
                int(x),
                int(x) + 1)
}

@/?
def divisible (a, b) {
    # Returns TRUE if a is divisible by b, FALSE otherwise
    ret null(a @% b)
}

def even (x) {
    # Returns TRUE if x is even, FALSE otherwise
    ret x @/? 2
}

def odd (x) {
    # Returns TRUE if x is odd, FALSE otherwise
    ret $! even(x)
}

def exp(x) {
    # Returns the exponential of x
    ret E ^ x
}

def ln(x) {
    # TODO impl
    ret assert(FALSE)
}

def log(x, n) {
    ret ln(x)/ln(n)
}

def sin(x) {
    # TODO impl
    ret assert(FALSE)
}

def cos(x) {
    # TODO impl
    ret assert(FALSE)
}

def tan(x) {
    ret sin(x)/cos(x)
}

def asin(x) {
    # TODO impl
    ret assert(FALSE)
}

def acos(x) {
    # TODO impl
    ret assert(FALSE)
}

def atan(x) {
    # TODO impl
    ret assert(FALSE)
}

def degrees(rad) {
    # Converts radians to degrees
    ret rad * 180 / PI
}

def radians(deg) {
    # Converts degrees to radians
    ret deg * PI / 180
}
